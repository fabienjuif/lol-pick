{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["ROLES","getRoleValue","roles","role","undefined","Player","name","pick","formPrefix","onRoleChange","defaultValue","map","type","defaultChecked","onChange","App","useLocalStorage","players","setPlayers","useState","copiedToClipboard","setCopiedToClipboard","clipboardTimer","useRef","roll","useCallback","a","innerPlayers","player","getAvailablePlayersForRole","filter","sortRoles","b","length","sortedRoles","slice","sort","playersAgreedRole","random","current","clearTimeout","roleMaxLength","reduce","acc","clipboardInput","value","padEnd","find","join","concat","select","document","execCommand","setTimeout","useEffect","onSubmit","e","preventDefault","data","fromEvent","submitBtn","forceSubmit","click","href","style","opacity","position","top","right","pointerEvents","ref","Array","from","_","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.34dc5c52.chunk.js","sourcesContent":["import { useCallback, useRef, useState, useEffect } from \"react\";\nimport { useLocalStorage } from \"react-use\";\nimport { random } from \"lodash\";\nimport { fromEvent } from \"from-form-submit\";\n\nconst ROLES = [\"Top\", \"Jungle\", \"Mid\", \"Bottom\", \"Support\"];\n\nconst getRoleValue = (roles, role) => {\n  if (!roles) return true;\n  if (roles[role] === null || roles[role] === undefined) return true;\n  return roles[role];\n};\n\nconst Player = ({ name, roles, pick, formPrefix, onRoleChange }) => {\n  return (\n    <tr>\n      <td>\n        <input name={`${formPrefix}name`} defaultValue={name} />\n      </td>\n      {ROLES.map((role) => (\n        <td key={role}>\n          <input\n            type=\"checkbox\"\n            name={`${formPrefix}roles.${role}`}\n            defaultChecked={getRoleValue(roles, role)}\n            onChange={onRoleChange}\n          />\n        </td>\n      ))}\n      <td>{pick}</td>\n    </tr>\n  );\n};\n\nfunction App() {\n  const [players = [], setPlayers] = useLocalStorage(\"players\");\n\n  const [copiedToClipboard, setCopiedToClipboard] = useState(false);\n  const clipboardTimer = useRef();\n\n  const roll = useCallback(\n    async (players) => {\n      const innerPlayers = players.map((player) => ({\n        ...player,\n        pick: undefined,\n      }));\n\n      // sort roles from the least popular to the most\n      const getAvailablePlayersForRole = (role) =>\n        innerPlayers.filter((player) => player.roles[role] && !player.pick);\n      const sortRoles = (a, b) =>\n        getAvailablePlayersForRole(a).length -\n        getAvailablePlayersForRole(b).length;\n      let sortedRoles = ROLES.slice().sort(sortRoles);\n\n      while (sortedRoles.length > 0) {\n        const role = sortedRoles[0];\n\n        // choose a player for this role a pick role\n        const playersAgreedRole = innerPlayers.filter(\n          (player) => player.roles[role] && !player.pick\n        );\n        if (playersAgreedRole.length > 0) {\n          const rIndex = random(playersAgreedRole.length - 1);\n          const pickedPlayer = playersAgreedRole[rIndex];\n\n          pickedPlayer.pick = role;\n        }\n\n        // sort roles once again since some players are not available now\n        sortedRoles = sortedRoles.slice(1).sort(sortRoles);\n      }\n\n      setPlayers(innerPlayers);\n\n      // copy result to clipboard\n      if (clipboardTimer.current) {\n        clearTimeout(clipboardTimer.current);\n      }\n      const roleMaxLength = ROLES.reduce((acc, role) =>\n        acc > role.length ? acc : role.length\n      );\n      clipboardInput.current.value = ROLES.map(\n        (role) =>\n          `${role.padEnd(roleMaxLength, \" \")}: ${\n            innerPlayers.find(({ pick }) => pick === role)?.name || \"n/a\"\n          }`\n      )\n        .join(\"\\n\")\n        .concat(\"\\n\\nGenerated with: http://localhost:3001/lol-pick\");\n      clipboardInput.current.select();\n      document.execCommand(\"copy\");\n      setCopiedToClipboard(true);\n      clipboardTimer.current = setTimeout(() => {\n        setCopiedToClipboard(false);\n      }, 500);\n    },\n    [setPlayers]\n  );\n\n  useEffect(() => {\n    return () => {\n      if (clearTimeout.current) {\n        clearTimeout(clearTimeout.current);\n      }\n    };\n  }, []);\n\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n      const data = fromEvent(e);\n\n      roll(data.players);\n    },\n    [roll]\n  );\n\n  const submitBtn = useRef(null);\n  const forceSubmit = useCallback(() => {\n    if (!submitBtn.current) return;\n    submitBtn.current.click();\n  }, []);\n\n  const clipboardInput = useRef(null);\n\n  return (\n    <div>\n      <a href=\"https://github.com/fabienjuif/lol-pick\">Source code</a>\n\n      <textarea\n        style={{\n          opacity: 0,\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          pointerEvents: \"none\",\n        }}\n        ref={clipboardInput}\n      />\n\n      <form onSubmit={onSubmit}>\n        <table>\n          <thead>\n            <tr>\n              <th>Player</th>\n              {ROLES.map((role) => (\n                <th key={role}>{role}</th>\n              ))}\n              <th>Pick</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Array.from({ length: 5 }).map((_, index) => (\n              <Player\n                key={index}\n                {...players[index]}\n                formPrefix={`players.${index}.`}\n                onRoleChange={forceSubmit}\n              />\n            ))}\n          </tbody>\n        </table>\n        <button type=\"submit\" ref={submitBtn}>\n          roll\n        </button>\n        {copiedToClipboard && <p>Copied in clipboard!</p>}\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
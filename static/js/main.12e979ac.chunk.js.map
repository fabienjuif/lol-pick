{"version":3,"sources":["App.jsx","reportWebVitals.js","index.js"],"names":["ROLES","getRoleValue","roles","role","undefined","Player","name","pick","formPrefix","onRoleChange","defaultValue","map","type","defaultChecked","onChange","App","useLocalStorage","players","setPlayers","roll","useCallback","innerPlayers","player","forEach","playersWithRole","filter","length","random","onSubmit","e","preventDefault","fromEvent","submitBtn","useRef","forceSubmit","current","click","Array","from","_","index","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAKMA,EAAQ,CAAC,MAAO,SAAU,MAAO,MAAO,WAExCC,EAAe,SAACC,EAAOC,GAC3B,OAAKD,IACe,OAAhBA,EAAMC,SAAkCC,IAAhBF,EAAMC,IAC3BD,EAAMC,KAGTE,EAAS,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,KAAMJ,EAA4C,EAA5CA,MAAOK,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAC/C,OACE,+BACE,6BACE,uBAAOH,KAAI,UAAKE,EAAL,QAAuBE,aAAcJ,MAEjDN,EAAMW,KAAI,SAACR,GAAD,OACT,6BACE,uBACES,KAAK,WACLN,KAAI,UAAKE,EAAL,iBAAwBL,GAC5BU,eAAgBZ,EAAaC,EAAOC,GACpCW,SAAUL,KALLN,MASX,6BAAKI,QAwEIQ,MAnEf,WAAgB,IAAD,EACsBC,YAAgB,WADtC,0BACNC,OADM,MACI,GADJ,EACQC,EADR,KAGPC,EAAOC,uBACX,SAACH,GACC,IAAMI,EAAeJ,EAAQN,KAAI,SAACW,GAAD,mBAAC,eAC7BA,GAD4B,IAE/Bf,UAAMH,OAGRJ,EAAMuB,SAAQ,SAACpB,GACb,IAAMqB,EAAkBH,EAAaI,QACnC,SAACH,GAAD,OAAYA,EAAOpB,MAAMC,KAAUmB,EAAOf,QAExCiB,EAAgBE,QAAU,IAC9BF,EAAgBG,iBAAOH,EAAgBE,OAAS,IAAInB,KAAOJ,MAG7De,EAAWG,KAEb,CAACH,IAGGU,EAAWR,uBACf,SAACS,GACCA,EAAEC,iBACFX,EAAKY,YAAUF,GAAGZ,WAEpB,CAACE,IAGGa,EAAYC,iBAAO,MACnBC,EAAcd,uBAAY,WACzBY,EAAUG,SACfH,EAAUG,QAAQC,UACjB,IAEH,OACE,uBAAMR,SAAUA,EAAhB,UACE,kCACE,gCACE,+BACE,wCACC5B,EAAMW,KAAI,SAACR,GAAD,OACT,6BAAgBA,GAAPA,MAEX,2CAGJ,gCACGkC,MAAMC,KAAK,CAAEZ,OAAQ,IAAKf,KAAI,SAAC4B,EAAGC,GAAJ,OAC7B,cAAC,EAAD,2BAEMvB,EAAQuB,IAFd,IAGEhC,WAAU,kBAAagC,EAAb,KACV/B,aAAcyB,IAHTM,WAQb,wBAAQ5B,KAAK,SAAS6B,IAAKT,EAA3B,sBClFSU,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.12e979ac.chunk.js","sourcesContent":["import { useCallback, useRef } from \"react\";\nimport { useLocalStorage } from \"react-use\";\nimport { random } from \"lodash\";\nimport { fromEvent } from \"from-form-submit\";\n\nconst ROLES = [\"top\", \"jungle\", \"mid\", \"adc\", \"support\"];\n\nconst getRoleValue = (roles, role) => {\n  if (!roles) return true;\n  if (roles[role] === null || roles[role] === undefined) return true;\n  return roles[role];\n};\n\nconst Player = ({ name, roles, pick, formPrefix, onRoleChange }) => {\n  return (\n    <tr>\n      <td>\n        <input name={`${formPrefix}name`} defaultValue={name} />\n      </td>\n      {ROLES.map((role) => (\n        <td key={role}>\n          <input\n            type=\"checkbox\"\n            name={`${formPrefix}roles.${role}`}\n            defaultChecked={getRoleValue(roles, role)}\n            onChange={onRoleChange}\n          />\n        </td>\n      ))}\n      <td>{pick}</td>\n    </tr>\n  );\n};\n\nfunction App() {\n  const [players = [], setPlayers] = useLocalStorage(\"players\");\n\n  const roll = useCallback(\n    (players) => {\n      const innerPlayers = players.map((player) => ({\n        ...player,\n        pick: undefined,\n      }));\n\n      ROLES.forEach((role) => {\n        const playersWithRole = innerPlayers.filter(\n          (player) => player.roles[role] && !player.pick\n        );\n        if (playersWithRole.length <= 0) return;\n        playersWithRole[random(playersWithRole.length - 1)].pick = role;\n      });\n\n      setPlayers(innerPlayers);\n    },\n    [setPlayers]\n  );\n\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n      roll(fromEvent(e).players);\n    },\n    [roll]\n  );\n\n  const submitBtn = useRef(null);\n  const forceSubmit = useCallback(() => {\n    if (!submitBtn.current) return;\n    submitBtn.current.click();\n  }, []);\n\n  return (\n    <form onSubmit={onSubmit}>\n      <table>\n        <thead>\n          <tr>\n            <th>Player</th>\n            {ROLES.map((role) => (\n              <th key={role}>{role}</th>\n            ))}\n            <th>Pick</th>\n          </tr>\n        </thead>\n        <tbody>\n          {Array.from({ length: 5 }).map((_, index) => (\n            <Player\n              key={index}\n              {...players[index]}\n              formPrefix={`players.${index}.`}\n              onRoleChange={forceSubmit}\n            />\n          ))}\n        </tbody>\n      </table>\n      <button type=\"submit\" ref={submitBtn}>\n        roll\n      </button>\n    </form>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}